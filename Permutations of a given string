//{ Driver Code Starts
//Initial Template for javascript

"use strict";

process.stdin.resume();
process.stdin.setEncoding("utf-8");

let inputString = "";
let currentLine = 0;

process.stdin.on("data", (inputStdin) => {
  inputString += inputStdin;
});

process.stdin.on("end", (_) => {
  inputString = inputString
    .trim()
    .split("\n")
    .map((string) => {
      return string.trim();
    });

  main();
});

function readLine() {
  return inputString[currentLine++];
}

/* Function to print an array */
function printArray(arr, size) {
  let i;
  let s = "";
  for (i = 0; i < size; i++) {
    s += arr[i] + " ";
  }
  console.log(s);
}

function main() {
  let t = parseInt(readLine());
  let i = 0;
  for (; i < t; i++) {
    let S = readLine();
    let obj = new Solution();
    let res = obj.find_permutation(S);
    printArray(res,res.length);
  }
}
// } Driver Code Ends


//User function Template for javascript

/**
 * @param {string} S
 * @return {string[]}
 */

class Solution {
    find_permutation(S){
         //code here
         const res = [];
         const differ = new Set()
         
         function permute(s, ans){
             if(differ.has(ans)) return 
             else differ.add(ans)
             
             if(s.length === 0){
                 res.push(ans)
                 return
             }
             
             for(let i=0; i<s.length; i++){
                 let ch = s[i];
                 let left = s.substring(0,i)
                 let right = s.substring(i+1);
                 permute(left+right, ans+ch)
             }
         }
         
         permute(S, "");
         res.sort((a,b) => {
             if(a< b) return -1;
    else if(b>a) return 1
    else return 0
         })
         return res
    }
}
