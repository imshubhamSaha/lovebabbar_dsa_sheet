///Unoptimised Solution
///T.L.E
//{ Driver Code Starts
//Initial Template for javascript

"use strict";

process.stdin.resume();
process.stdin.setEncoding("utf-8");

let inputString = "";
let currentLine = 0;

process.stdin.on("data", (inputStdin) => {
  inputString += inputStdin;
});

process.stdin.on("end", (_) => {
  inputString = inputString
    .trim()
    .split("\n")
    .map((string) => {
      return string.trim();
    });

  main();
});

function readLine() {
  return inputString[currentLine++];
}


function main() {
  let t = parseInt(readLine());
  let i = 0;
 
  for (; i < t; i++) {
    let S = readLine().trim();    
    let obj = new Solution();
    let res = obj.longestPalin(S);
    console.log(res);
  }

}
// } Driver Code Ends


//User function Template for javascript

/**
 * @param {string} S
 * @return {string} 
*/

class Solution {
    
    checkPalindrome(str){
        let i=0
        let j = str.length-1
        
        while(i<j){
            if(str[i] != str[j]) return false
            
            i++
            j--;
        }
        
        return true
    }
  longestPalin(S){
    //code here
    let longestStr = ""
    let longest = 0
    
    for(let i= 0; i<S.length; i++){
        for(let j=i; j<S.length; j++){
            let str = ""
            for(let k=i; k<=j; k++){
                str += S[k]
            }
            if(str.length> longest && this.checkPalindrome(str)){
                longestStr = str
                longest = str.length
            }
        }
    }
    
    return longestStr
  }
}

///Optimised Solution

//{ Driver Code Starts
//Initial Template for javascript

"use strict";

process.stdin.resume();
process.stdin.setEncoding("utf-8");

let inputString = "";
let currentLine = 0;

process.stdin.on("data", (inputStdin) => {
  inputString += inputStdin;
});

process.stdin.on("end", (_) => {
  inputString = inputString
    .trim()
    .split("\n")
    .map((string) => {
      return string.trim();
    });

  main();
});

function readLine() {
  return inputString[currentLine++];
}


function main() {
  let t = parseInt(readLine());
  let i = 0;
 
  for (; i < t; i++) {
    let S = readLine().trim();    
    let obj = new Solution();
    let res = obj.longestPalin(S);
    console.log(res);
  }

}
// } Driver Code Ends


//User function Template for javascript

/**
 * @param {string} S
 * @return {string} 
*/

class Solution {
    
    checkPalindrome(str){
        let i=0
        let j = str.length-1
        
        while(i<j){
            if(str[i] != str[j]) return false
            
            i++
            j--;
        }
        
        return true
    }
  longestPalin(S){
    //code here
    let longestStr = ""
    let longest = 0
    
    for(let i= 0; i<S.length; i++){
        let str = ""
        for(let j=i; j<S.length; j++){
            str += S[j]
            if(str.length> longest && this.checkPalindrome(str)){
                longestStr = str
                longest = str.length
            }
        }
    }
    
    return longestStr
  }
}



