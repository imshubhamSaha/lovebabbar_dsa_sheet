//{ Driver Code Starts
//Initial Template for javascript

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/* Function to print an array */
function printArray(arr, size)
{
    let i;
    let s='';
    for (i=0; i < size; i++) {
        s += arr[i] + " ";
    }
    console.log(s);
}

function main() {
    let t = parseInt(readLine());
    let i = 0;
    for(;i<t;i++)
    {
        let input_ar0 = readLine().split(' ').map(x=>parseInt(x));
        let m = input_ar0[0];
        let n = input_ar0[1];
        let arr1 = new Array(m);
        let arr2 = new Array(n);
        let input_ar1 = readLine().split(' ').map(x=>parseInt(x));
        for(let i=0;i<m;i++)
            arr1[i] = input_ar1[i];
        let input_ar2 = readLine().split(' ').map(x=>parseInt(x));
        for(let i=0;i<n;i++)
            arr2[i] = input_ar2[i];
        let obj = new Solution();
        let res = obj.countEleLessThanOrEqual(arr1,arr2,m,n);
        printArray(res, res.length);
    }
}
// } Driver Code Ends


//User function Template for javascript

/**
 * @param {Number[]} arr1
 * @param {Number[]} arr2
 * @param {Number} m
 * @param {Number} n
 * @returns {number[]}
 */
class Solution {
    countEleLessThanOrEqual(arr1,arr2,m,n){
        //code here
        arr2.sort((a,b) => a-b);
        
        const ans = new Array(m).fill(0);
        
        for(let i=0; i<m; i++){
           let l =0
           let r= n-1;
           while(l<=r){
               let mid = Math.floor(l + (r-l)/2);
               if(arr2[mid] === arr1[i]) l = mid+1;
               else if(arr2[mid] < arr1[i]) l = mid+1
               else r = mid-1
           }
           
           ans[i] = r+1
        }
        
        return ans
    }
    
}

