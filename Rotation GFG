//{ Driver Code Starts
//Initial Template for javascript
'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function main() {
    let t = parseInt(readLine());
    let i = 0;
    for(;i<t;i++)
    {
        let n;
        n = parseInt(readLine());
        let arr = readLine().split(' ').map(x=>parseInt(x));
        let obj = new Solution();
        console.log(obj.findKRotation(arr, n));
    }
}

// } Driver Code Ends


//User function Template for javascript

/**
 * @param {number[]} arr
 * @param {number} n
 * @return {integer}
 */
class Solution {
    findKRotation(arr,n) {
        // code here 
        let min = arr[0];
        let min_idx = 0
        
        for(let i=0; i<n; i++){
            if(min > arr[i]){
                min = arr[i];
                min_idx = i
            }
        }
        
        return min_idx
    }
}

//{ Driver Code Starts
//Initial Template for javascript
'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function main() {
    let t = parseInt(readLine());
    let i = 0;
    for(;i<t;i++)
    {
        let n;
        n = parseInt(readLine());
        let arr = readLine().split(' ').map(x=>parseInt(x));
        let obj = new Solution();
        console.log(obj.findKRotation(arr, n));
    }
}

// } Driver Code Ends


//User function Template for javascript

/**
 * @param {number[]} arr
 * @param {number} n
 * @return {integer}
 */
class Solution {
    findKRotation(arr,n) {
        // code here 
       let low = 0
       let high = n-1;
       while(low<=high){
           let mid = low + Math.floor((high-low)/2);
           
           if(mid > low && arr[mid-1] > arr[mid]) return mid;
           else if(mid < high && arr[mid] > arr[mid+1]) return mid+1;
           else if(arr[low] > arr[mid]) high = mid-1;
           else low = mid+1;
       }
       
       return 0
    }
}
